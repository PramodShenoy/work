/**
 * This class is generated by jOOQ
 */
package com.cf.pg_catalog.routines;


import com.cf.pg_catalog.PgCatalog;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatGetActivity extends AbstractRoutine<Void> {

    private static final long serialVersionUID = 261054014;

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.pid</code>.
     */
    public static final Parameter<Integer> PID = createParameter("pid", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.datid</code>.
     */
    public static final Parameter<Long> DATID = createParameter("datid", org.jooq.impl.SQLDataType.BIGINT, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.pid</code>.
     */
    public static final Parameter<Integer> PID = createParameter("pid", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.usesysid</code>.
     */
    public static final Parameter<Long> USESYSID = createParameter("usesysid", org.jooq.impl.SQLDataType.BIGINT, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.application_name</code>.
     */
    public static final Parameter<String> APPLICATION_NAME = createParameter("application_name", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.state</code>.
     */
    public static final Parameter<String> STATE = createParameter("state", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.query</code>.
     */
    public static final Parameter<String> QUERY = createParameter("query", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.waiting</code>.
     */
    public static final Parameter<Boolean> WAITING = createParameter("waiting", org.jooq.impl.SQLDataType.BOOLEAN, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.xact_start</code>.
     */
    public static final Parameter<Timestamp> XACT_START = createParameter("xact_start", org.jooq.impl.SQLDataType.TIMESTAMP, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.query_start</code>.
     */
    public static final Parameter<Timestamp> QUERY_START = createParameter("query_start", org.jooq.impl.SQLDataType.TIMESTAMP, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.backend_start</code>.
     */
    public static final Parameter<Timestamp> BACKEND_START = createParameter("backend_start", org.jooq.impl.SQLDataType.TIMESTAMP, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.state_change</code>.
     */
    public static final Parameter<Timestamp> STATE_CHANGE = createParameter("state_change", org.jooq.impl.SQLDataType.TIMESTAMP, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.client_addr</code>.
     */
    public static final Parameter<Object> CLIENT_ADDR = createParameter("client_addr", org.jooq.impl.DefaultDataType.getDefaultDataType("inet"), false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.client_hostname</code>.
     */
    public static final Parameter<String> CLIENT_HOSTNAME = createParameter("client_hostname", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.client_port</code>.
     */
    public static final Parameter<Integer> CLIENT_PORT = createParameter("client_port", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.backend_xid</code>.
     */
    public static final Parameter<Long> BACKEND_XID = createParameter("backend_xid", org.jooq.impl.SQLDataType.BIGINT, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.backend_xmin</code>.
     */
    public static final Parameter<Long> BACKEND_XMIN = createParameter("backend_xmin", org.jooq.impl.SQLDataType.BIGINT, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.ssl</code>.
     */
    public static final Parameter<Boolean> SSL = createParameter("ssl", org.jooq.impl.SQLDataType.BOOLEAN, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.sslversion</code>.
     */
    public static final Parameter<String> SSLVERSION = createParameter("sslversion", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.sslcipher</code>.
     */
    public static final Parameter<String> SSLCIPHER = createParameter("sslcipher", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.sslbits</code>.
     */
    public static final Parameter<Integer> SSLBITS = createParameter("sslbits", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.sslcompression</code>.
     */
    public static final Parameter<Boolean> SSLCOMPRESSION = createParameter("sslcompression", org.jooq.impl.SQLDataType.BOOLEAN, false, false);

    /**
     * The parameter <code>pg_catalog.pg_stat_get_activity.sslclientdn</code>.
     */
    public static final Parameter<String> SSLCLIENTDN = createParameter("sslclientdn", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * Create a new routine call instance
     */
    public PgStatGetActivity() {
        super("pg_stat_get_activity", PgCatalog.PG_CATALOG);

        addInOutParameter(PID);
        addOutParameter(DATID);
        addInOutParameter(PID);
        addOutParameter(USESYSID);
        addOutParameter(APPLICATION_NAME);
        addOutParameter(STATE);
        addOutParameter(QUERY);
        addOutParameter(WAITING);
        addOutParameter(XACT_START);
        addOutParameter(QUERY_START);
        addOutParameter(BACKEND_START);
        addOutParameter(STATE_CHANGE);
        addOutParameter(CLIENT_ADDR);
        addOutParameter(CLIENT_HOSTNAME);
        addOutParameter(CLIENT_PORT);
        addOutParameter(BACKEND_XID);
        addOutParameter(BACKEND_XMIN);
        addOutParameter(SSL);
        addOutParameter(SSLVERSION);
        addOutParameter(SSLCIPHER);
        addOutParameter(SSLBITS);
        addOutParameter(SSLCOMPRESSION);
        addOutParameter(SSLCLIENTDN);
    }

    /**
     * Set the <code>pid</code> parameter IN value to the routine
     */
    public void setPid(Integer value) {
        setValue(PID, value);
    }

    /**
     * Get the <code>pid</code> parameter OUT value from the routine
     */
    public Integer getPid() {
        return get(PID);
    }

    /**
     * Get the <code>datid</code> parameter OUT value from the routine
     */
    public Long getDatid() {
        return get(DATID);
    }

    /**
     * Get the <code>pid</code> parameter OUT value from the routine
     */
    public Integer getPid() {
        return get(PID);
    }

    /**
     * Get the <code>usesysid</code> parameter OUT value from the routine
     */
    public Long getUsesysid() {
        return get(USESYSID);
    }

    /**
     * Get the <code>application_name</code> parameter OUT value from the routine
     */
    public String getApplicationName() {
        return get(APPLICATION_NAME);
    }

    /**
     * Get the <code>state</code> parameter OUT value from the routine
     */
    public String getState() {
        return get(STATE);
    }

    /**
     * Get the <code>query</code> parameter OUT value from the routine
     */
    public String getQuery() {
        return get(QUERY);
    }

    /**
     * Get the <code>waiting</code> parameter OUT value from the routine
     */
    public Boolean getWaiting() {
        return get(WAITING);
    }

    /**
     * Get the <code>xact_start</code> parameter OUT value from the routine
     */
    public Timestamp getXactStart() {
        return get(XACT_START);
    }

    /**
     * Get the <code>query_start</code> parameter OUT value from the routine
     */
    public Timestamp getQueryStart() {
        return get(QUERY_START);
    }

    /**
     * Get the <code>backend_start</code> parameter OUT value from the routine
     */
    public Timestamp getBackendStart() {
        return get(BACKEND_START);
    }

    /**
     * Get the <code>state_change</code> parameter OUT value from the routine
     */
    public Timestamp getStateChange() {
        return get(STATE_CHANGE);
    }

    /**
     * Get the <code>client_addr</code> parameter OUT value from the routine
     */
    public Object getClientAddr() {
        return get(CLIENT_ADDR);
    }

    /**
     * Get the <code>client_hostname</code> parameter OUT value from the routine
     */
    public String getClientHostname() {
        return get(CLIENT_HOSTNAME);
    }

    /**
     * Get the <code>client_port</code> parameter OUT value from the routine
     */
    public Integer getClientPort() {
        return get(CLIENT_PORT);
    }

    /**
     * Get the <code>backend_xid</code> parameter OUT value from the routine
     */
    public Long getBackendXid() {
        return get(BACKEND_XID);
    }

    /**
     * Get the <code>backend_xmin</code> parameter OUT value from the routine
     */
    public Long getBackendXmin() {
        return get(BACKEND_XMIN);
    }

    /**
     * Get the <code>ssl</code> parameter OUT value from the routine
     */
    public Boolean getSsl() {
        return get(SSL);
    }

    /**
     * Get the <code>sslversion</code> parameter OUT value from the routine
     */
    public String getSslversion() {
        return get(SSLVERSION);
    }

    /**
     * Get the <code>sslcipher</code> parameter OUT value from the routine
     */
    public String getSslcipher() {
        return get(SSLCIPHER);
    }

    /**
     * Get the <code>sslbits</code> parameter OUT value from the routine
     */
    public Integer getSslbits() {
        return get(SSLBITS);
    }

    /**
     * Get the <code>sslcompression</code> parameter OUT value from the routine
     */
    public Boolean getSslcompression() {
        return get(SSLCOMPRESSION);
    }

    /**
     * Get the <code>sslclientdn</code> parameter OUT value from the routine
     */
    public String getSslclientdn() {
        return get(SSLCLIENTDN);
    }
}
