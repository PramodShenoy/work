/**
 * This class is generated by jOOQ
 */
package com.cf.pg_catalog.routines;


import com.cf.pg_catalog.PgCatalog;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgPreparedStatement extends AbstractRoutine<Void> {

    private static final long serialVersionUID = -1814837658;

    /**
     * The parameter <code>pg_catalog.pg_prepared_statement.name</code>.
     */
    public static final Parameter<String> NAME = createParameter("name", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_prepared_statement.statement</code>.
     */
    public static final Parameter<String> STATEMENT = createParameter("statement", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>pg_catalog.pg_prepared_statement.prepare_time</code>.
     */
    public static final Parameter<Timestamp> PREPARE_TIME = createParameter("prepare_time", org.jooq.impl.SQLDataType.TIMESTAMP, false, false);

    /**
     * The parameter <code>pg_catalog.pg_prepared_statement.parameter_types</code>.
     */
    public static final Parameter<Object[]> PARAMETER_TYPES = createParameter("parameter_types", org.jooq.impl.DefaultDataType.getDefaultDataType("regtype").getArrayDataType(), false, false);

    /**
     * The parameter <code>pg_catalog.pg_prepared_statement.from_sql</code>.
     */
    public static final Parameter<Boolean> FROM_SQL = createParameter("from_sql", org.jooq.impl.SQLDataType.BOOLEAN, false, false);

    /**
     * Create a new routine call instance
     */
    public PgPreparedStatement() {
        super("pg_prepared_statement", PgCatalog.PG_CATALOG);

        addOutParameter(NAME);
        addOutParameter(STATEMENT);
        addOutParameter(PREPARE_TIME);
        addOutParameter(PARAMETER_TYPES);
        addOutParameter(FROM_SQL);
    }

    /**
     * Get the <code>name</code> parameter OUT value from the routine
     */
    public String getName_() {
        return get(NAME);
    }

    /**
     * Get the <code>statement</code> parameter OUT value from the routine
     */
    public String getStatement() {
        return get(STATEMENT);
    }

    /**
     * Get the <code>prepare_time</code> parameter OUT value from the routine
     */
    public Timestamp getPrepareTime() {
        return get(PREPARE_TIME);
    }

    /**
     * Get the <code>parameter_types</code> parameter OUT value from the routine
     */
    public Object[] getParameterTypes() {
        return get(PARAMETER_TYPES);
    }

    /**
     * Get the <code>from_sql</code> parameter OUT value from the routine
     */
    public Boolean getFromSql() {
        return get(FROM_SQL);
    }
}
