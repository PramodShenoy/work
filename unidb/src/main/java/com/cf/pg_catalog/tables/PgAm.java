/**
 * This class is generated by jOOQ
 */
package com.cf.pg_catalog.tables;


import com.cf.pg_catalog.PgCatalog;
import com.cf.pg_catalog.tables.records.PgAmRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgAm extends TableImpl<PgAmRecord> {

    private static final long serialVersionUID = -390458048;

    /**
     * The reference instance of <code>pg_catalog.pg_am</code>
     */
    public static final PgAm PG_AM = new PgAm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgAmRecord> getRecordType() {
        return PgAmRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_am.amname</code>.
     */
    public final TableField<PgAmRecord, String> AMNAME = createField("amname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amstrategies</code>.
     */
    public final TableField<PgAmRecord, Short> AMSTRATEGIES = createField("amstrategies", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amsupport</code>.
     */
    public final TableField<PgAmRecord, Short> AMSUPPORT = createField("amsupport", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcanorder</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMCANORDER = createField("amcanorder", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcanorderbyop</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMCANORDERBYOP = createField("amcanorderbyop", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcanbackward</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMCANBACKWARD = createField("amcanbackward", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcanunique</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMCANUNIQUE = createField("amcanunique", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcanmulticol</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMCANMULTICOL = createField("amcanmulticol", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amoptionalkey</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMOPTIONALKEY = createField("amoptionalkey", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amsearcharray</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMSEARCHARRAY = createField("amsearcharray", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amsearchnulls</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMSEARCHNULLS = createField("amsearchnulls", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amstorage</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMSTORAGE = createField("amstorage", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amclusterable</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMCLUSTERABLE = createField("amclusterable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.ampredlocks</code>.
     */
    public final TableField<PgAmRecord, Boolean> AMPREDLOCKS = createField("ampredlocks", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amkeytype</code>.
     */
    public final TableField<PgAmRecord, Long> AMKEYTYPE = createField("amkeytype", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.aminsert</code>.
     */
    public final TableField<PgAmRecord, String> AMINSERT = createField("aminsert", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.ambeginscan</code>.
     */
    public final TableField<PgAmRecord, String> AMBEGINSCAN = createField("ambeginscan", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amgettuple</code>.
     */
    public final TableField<PgAmRecord, String> AMGETTUPLE = createField("amgettuple", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amgetbitmap</code>.
     */
    public final TableField<PgAmRecord, String> AMGETBITMAP = createField("amgetbitmap", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amrescan</code>.
     */
    public final TableField<PgAmRecord, String> AMRESCAN = createField("amrescan", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amendscan</code>.
     */
    public final TableField<PgAmRecord, String> AMENDSCAN = createField("amendscan", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.ammarkpos</code>.
     */
    public final TableField<PgAmRecord, String> AMMARKPOS = createField("ammarkpos", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amrestrpos</code>.
     */
    public final TableField<PgAmRecord, String> AMRESTRPOS = createField("amrestrpos", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.ambuild</code>.
     */
    public final TableField<PgAmRecord, String> AMBUILD = createField("ambuild", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.ambuildempty</code>.
     */
    public final TableField<PgAmRecord, String> AMBUILDEMPTY = createField("ambuildempty", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.ambulkdelete</code>.
     */
    public final TableField<PgAmRecord, String> AMBULKDELETE = createField("ambulkdelete", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amvacuumcleanup</code>.
     */
    public final TableField<PgAmRecord, String> AMVACUUMCLEANUP = createField("amvacuumcleanup", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcanreturn</code>.
     */
    public final TableField<PgAmRecord, String> AMCANRETURN = createField("amcanreturn", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amcostestimate</code>.
     */
    public final TableField<PgAmRecord, String> AMCOSTESTIMATE = createField("amcostestimate", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_am.amoptions</code>.
     */
    public final TableField<PgAmRecord, String> AMOPTIONS = createField("amoptions", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>pg_catalog.pg_am</code> table reference
     */
    public PgAm() {
        this("pg_am", null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_am</code> table reference
     */
    public PgAm(String alias) {
        this(alias, PG_AM);
    }

    private PgAm(String alias, Table<PgAmRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgAm(String alias, Table<PgAmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgAm as(String alias) {
        return new PgAm(alias, this);
    }

    /**
     * Rename this table
     */
    public PgAm rename(String name) {
        return new PgAm(name, null);
    }
}
